# Generated by Django 4.1.7 on 2025-02-25 19:55

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('orders', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('shipper', 'Shipper'), ('carrier', 'Carrier')], max_length=10)),
                ('company_name', models.CharField(max_length=255)),
                ('address', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('vat_number', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('contact_person', models.CharField(max_length=255)),
                ('groups', models.ManyToManyField(blank=True, related_name='custom_user_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='custom_user_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CarrierProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legal_address', models.CharField(max_length=255)),
                ('legal_address_latitude', models.FloatField(blank=True, null=True)),
                ('legal_address_longitude', models.FloatField(blank=True, null=True)),
                ('contact_person', models.CharField(max_length=255)),
                ('phone_number', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('vat_number', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='carrier', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TransportItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('driver_license', models.CharField(help_text='Driver license number', max_length=20, unique=True)),
                ('truck_number', models.CharField(help_text='Truck license plate', max_length=20, unique=True)),
                ('trailer_number', models.CharField(help_text='Trailer license plate', max_length=20, unique=True)),
                ('trailer_type', models.CharField(choices=[('tautliner', 'Tautliner'), ('reefer', 'Reefer'), ('insulated trailer', 'Insulated Trailer'), ('container chassis', 'Container chassis'), ('flatbed trailer', 'Flatbed trailer'), ('tandem trailer', 'Tandem trailer'), ('car transporter', 'Car transporter'), ('cattle trailer', 'Cattle trailer'), ('open-top trailer', 'Open-top trailer'), ('cement tanker', 'Cememnt tanker'), ('adr', 'ADR'), ('timber trailer', 'Timber trailer'), ('lowboy trailer', 'Lowboy trailer'), ('tanker trailer', 'Tanker trailer'), ('dump trailer', 'Dump trailer'), ('bulk flour tanker', 'Bulk flour tanker')], help_text='Type of trailer', max_length=50)),
                ('carrier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transport_items', to='users.carrierprofile')),
            ],
        ),
        migrations.CreateModel(
            name='ShipperProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legal_address', models.CharField(max_length=255)),
                ('legal_address_latitude', models.FloatField(blank=True, null=True)),
                ('legal_address_longitude', models.FloatField(blank=True, null=True)),
                ('warehouse_latitude', models.FloatField(blank=True, null=True)),
                ('warehouse_longitude', models.FloatField(blank=True, null=True)),
                ('contact_person', models.CharField(max_length=255)),
                ('phone_number', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('vat_number', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='shipper', to=settings.AUTH_USER_MODEL)),
                ('warehouse_address', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='orders.virtualwarehouse')),
            ],
        ),
        migrations.CreateModel(
            name='CargoItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Cargo name', max_length=255)),
                ('volume', models.DecimalField(decimal_places=2, help_text='Available volume in (mÂ³)', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('weight', models.DecimalField(decimal_places=2, help_text='Total weight in (kg)', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('on_pallets', models.BooleanField(default=False, help_text='Stored on pallets')),
                ('number_of_pallets', models.PositiveIntegerField(default=0, help_text='Number of pallets')),
                ('packaging', models.CharField(blank=True, help_text='Packaging type (e.g, boxes, barrels)', max_length=255, null=True)),
                ('storage_conditions', models.TextField(blank=True, help_text='Special storage conditions', null=True)),
                ('transport_conditions', models.TextField(blank=True, help_text='Required transport conditions', null=True)),
                ('shipper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cargo_items', to='users.shipperprofile')),
            ],
        ),
    ]
